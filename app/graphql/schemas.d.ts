/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by @jlowcs/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLChargeCode {
  id: string;
  name: string;
  code: string;
  description?: string;
  expired: boolean;
}

export const enum GQLDayMode {
  NORMAL = 'NORMAL',
  HOL_PUBLIC = 'HOL_PUBLIC',
  HOL_PERSONAL = 'HOL_PERSONAL',
  HOL_RDO = 'HOL_RDO',
  HOL_ANNUAL = 'HOL_ANNUAL'
}

export interface GQLMutation {
  createChargeCode?: GQLChargeCode;
  updateChargeCode?: GQLChargeCode;
  deleteChargeCode?: boolean;
  createTimeCharge: GQLTimeCharge;
  updateTimeCharge: GQLTimeCharge;
  createTrackedDay?: GQLTrackedDay;
  deleteTrackedDay?: boolean;
  updateTrackedDay?: GQLTrackedDay;
  createTrackedTask: GQLTrackedTask;
  updateTrackedTask: GQLTrackedTask;
  deleteTrackedTask?: boolean;
  createUser?: GQLUser;
  deleteUser?: boolean;
}

export interface GQLPageInfo {
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  startCursor?: string;
  endCursor?: string;
}

export interface GQLQuery {
  chargeCodes?: Array<GQLChargeCode>;
  timeCharges?: Array<GQLTimeCharge>;
  timeChargeTotals?: Array<GQLTimeChargeTotal>;
  trackedDays?: Array<GQLTrackedDay>;
  trackedDaysPaginated?: GQLTrackedDayConnection;
  trackedTasks?: Array<GQLTrackedTask>;
  users?: Array<GQLUser>;
}

export interface GQLSubscription {
  timeChargeTotalChanged?: GQLTimeChargeTotal;
}

export interface GQLTimeCharge {
  id: string;
  timeSlot?: number;
  
  /**
   * The number of times this charge code appears at this timeslot
   */
  chargeCodeAppearance?: number;
  
  /**
   * The number of chargecodes that appear across all tracked tasks at this timeslot
   */
  totalChargeCodesForSlot?: number;
  trackedDay?: GQLTrackedDay;
  chargeCode?: GQLChargeCode;
}

/**
 * This represents a single ChargeCode for a Tracked Day and the value for the timesheet
 */
export interface GQLTimeChargeTotal {
  id: string;
  value?: number;
  trackedDay?: GQLTrackedDay;
  chargeCode?: GQLChargeCode;
  user?: GQLUser;
}

/**
 *  each tracked day will have a max of 240 timeslots (if you work 24hrs!)
 */
export interface GQLTrackedDay {
  id: string;
  date: number;
  week: number;
  year: number;
  mode: GQLDayMode;
  user?: GQLUser;
  trackedTasks?: Array<GQLTrackedTask>;
  timeCharges?: Array<GQLTimeCharge>;
  timeChargeTotals?: Array<GQLTimeChargeTotal>;
}

/**
 * the @connection directive is meant to work but it clashes with dgs-codegen plugin (not supported yet, but there's
 * an untouched PR...). For now, implementing the types manually here
 */
export interface GQLTrackedDayConnection {
  pageInfo: GQLPageInfo;
  edges?: Array<GQLTrackedDayEdge>;
}

export interface GQLTrackedDayEdge {
  cursor: string;
  node?: GQLTrackedDay;
}

export interface GQLTrackedTask {
  id: string;
  notes?: string;
  timeSlots?: Array<number>;
  trackedDay?: GQLTrackedDay;
  chargeCodes?: Array<GQLChargeCode>;
}

export interface GQLUser {
  id: string;
  username: string;
  trackedDays?: Array<GQLTrackedDay>;
}

export interface GQLWeekOfYear {
  week?: number;
  year: number;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  ChargeCode?: GQLChargeCodeTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  PageInfo?: GQLPageInfoTypeResolver;
  Query?: GQLQueryTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
  TimeCharge?: GQLTimeChargeTypeResolver;
  TimeChargeTotal?: GQLTimeChargeTotalTypeResolver;
  TrackedDay?: GQLTrackedDayTypeResolver;
  TrackedDayConnection?: GQLTrackedDayConnectionTypeResolver;
  TrackedDayEdge?: GQLTrackedDayEdgeTypeResolver;
  TrackedTask?: GQLTrackedTaskTypeResolver;
  User?: GQLUserTypeResolver;
}
export interface GQLChargeCodeTypeResolver<TParent = any> {
  id?: ChargeCodeToIdResolver<TParent>;
  name?: ChargeCodeToNameResolver<TParent>;
  code?: ChargeCodeToCodeResolver<TParent>;
  description?: ChargeCodeToDescriptionResolver<TParent>;
  expired?: ChargeCodeToExpiredResolver<TParent>;
}

export interface ChargeCodeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCodeToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCodeToCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCodeToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChargeCodeToExpiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  createChargeCode?: MutationToCreateChargeCodeResolver<TParent>;
  updateChargeCode?: MutationToUpdateChargeCodeResolver<TParent>;
  deleteChargeCode?: MutationToDeleteChargeCodeResolver<TParent>;
  createTimeCharge?: MutationToCreateTimeChargeResolver<TParent>;
  updateTimeCharge?: MutationToUpdateTimeChargeResolver<TParent>;
  createTrackedDay?: MutationToCreateTrackedDayResolver<TParent>;
  deleteTrackedDay?: MutationToDeleteTrackedDayResolver<TParent>;
  updateTrackedDay?: MutationToUpdateTrackedDayResolver<TParent>;
  createTrackedTask?: MutationToCreateTrackedTaskResolver<TParent>;
  updateTrackedTask?: MutationToUpdateTrackedTaskResolver<TParent>;
  deleteTrackedTask?: MutationToDeleteTrackedTaskResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  deleteUser?: MutationToDeleteUserResolver<TParent>;
}

export interface MutationToCreateChargeCodeArgs {
  name: string;
  code: string;
  description?: string;
  expired?: boolean;
}
export interface MutationToCreateChargeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateChargeCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateChargeCodeArgs {
  id: string;
  name?: string;
  code?: string;
  description?: string;
  expired?: boolean;
}
export interface MutationToUpdateChargeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateChargeCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteChargeCodeArgs {
  id: string;
}
export interface MutationToDeleteChargeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteChargeCodeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTimeChargeArgs {
  timeSlot: number;
  chargeCodeId: string;
  trackedDayID: string;
  chargeCodeAppearance?: number;
  totalChargeCodesForSlot?: number;
}
export interface MutationToCreateTimeChargeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTimeChargeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTimeChargeArgs {
  id: string;
  chargeCodeAppearance?: number;
  totalChargeCodesForSlot?: number;
}
export interface MutationToUpdateTimeChargeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTimeChargeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTrackedDayArgs {
  date: number;
  mode?: string;
}
export interface MutationToCreateTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTrackedDayArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTrackedDayArgs {
  id: string;
}
export interface MutationToDeleteTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTrackedDayArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTrackedDayArgs {
  id: string;
  mode?: GQLDayMode;
  date?: number;
  trackedTaskIds?: Array<string>;
}
export interface MutationToUpdateTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTrackedDayArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateTrackedTaskArgs {
  trackedDayId: string;
  notes?: string;
}
export interface MutationToCreateTrackedTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateTrackedTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdateTrackedTaskArgs {
  id: string;
  notes?: string;
  chargeCodeIds?: Array<string>;
  timeSlots?: Array<number>;
}
export interface MutationToUpdateTrackedTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdateTrackedTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteTrackedTaskArgs {
  id?: string;
}
export interface MutationToDeleteTrackedTaskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteTrackedTaskArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  username: string;
  password: string;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeleteUserArgs {
  username: string;
}
export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPageInfoTypeResolver<TParent = any> {
  hasNextPage?: PageInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: PageInfoToHasPreviousPageResolver<TParent>;
  startCursor?: PageInfoToStartCursorResolver<TParent>;
  endCursor?: PageInfoToEndCursorResolver<TParent>;
}

export interface PageInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToStartCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PageInfoToEndCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLQueryTypeResolver<TParent = any> {
  chargeCodes?: QueryToChargeCodesResolver<TParent>;
  timeCharges?: QueryToTimeChargesResolver<TParent>;
  timeChargeTotals?: QueryToTimeChargeTotalsResolver<TParent>;
  trackedDays?: QueryToTrackedDaysResolver<TParent>;
  trackedDaysPaginated?: QueryToTrackedDaysPaginatedResolver<TParent>;
  trackedTasks?: QueryToTrackedTasksResolver<TParent>;
  users?: QueryToUsersResolver<TParent>;
}

export interface QueryToChargeCodesArgs {
  ids?: Array<string>;
  name?: string;
  code?: string;
  description?: string;
  expired?: boolean;
}
export interface QueryToChargeCodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToChargeCodesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTimeChargesArgs {
  trackedDayId?: string;
  timeSlot?: number;
  chargeCodeId?: string;
}
export interface QueryToTimeChargesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTimeChargesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTimeChargeTotalsArgs {
  weekOfYear?: GQLWeekOfYear;
}
export interface QueryToTimeChargeTotalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTimeChargeTotalsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTrackedDaysArgs {
  id?: string;
}
export interface QueryToTrackedDaysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTrackedDaysArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTrackedDaysPaginatedArgs {
  after?: string;
  first?: number;
}
export interface QueryToTrackedDaysPaginatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTrackedDaysPaginatedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTrackedTasksArgs {
  trackedDayId?: string;
}
export interface QueryToTrackedTasksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTrackedTasksArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersArgs {
  username?: string;
}
export interface QueryToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  timeChargeTotalChanged?: SubscriptionToTimeChargeTotalChangedResolver<TParent>;
}

export interface SubscriptionToTimeChargeTotalChangedArgs {
  userId: string;
}
export interface SubscriptionToTimeChargeTotalChangedResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToTimeChargeTotalChangedArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToTimeChargeTotalChangedArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface GQLTimeChargeTypeResolver<TParent = any> {
  id?: TimeChargeToIdResolver<TParent>;
  timeSlot?: TimeChargeToTimeSlotResolver<TParent>;
  chargeCodeAppearance?: TimeChargeToChargeCodeAppearanceResolver<TParent>;
  totalChargeCodesForSlot?: TimeChargeToTotalChargeCodesForSlotResolver<TParent>;
  trackedDay?: TimeChargeToTrackedDayResolver<TParent>;
  chargeCode?: TimeChargeToChargeCodeResolver<TParent>;
}

export interface TimeChargeToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeToTimeSlotResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeToChargeCodeAppearanceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeToTotalChargeCodesForSlotResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeToTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeToChargeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTimeChargeTotalTypeResolver<TParent = any> {
  id?: TimeChargeTotalToIdResolver<TParent>;
  value?: TimeChargeTotalToValueResolver<TParent>;
  trackedDay?: TimeChargeTotalToTrackedDayResolver<TParent>;
  chargeCode?: TimeChargeTotalToChargeCodeResolver<TParent>;
  user?: TimeChargeTotalToUserResolver<TParent>;
}

export interface TimeChargeTotalToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeTotalToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeTotalToTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeTotalToChargeCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TimeChargeTotalToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTrackedDayTypeResolver<TParent = any> {
  id?: TrackedDayToIdResolver<TParent>;
  date?: TrackedDayToDateResolver<TParent>;
  week?: TrackedDayToWeekResolver<TParent>;
  year?: TrackedDayToYearResolver<TParent>;
  mode?: TrackedDayToModeResolver<TParent>;
  user?: TrackedDayToUserResolver<TParent>;
  trackedTasks?: TrackedDayToTrackedTasksResolver<TParent>;
  timeCharges?: TrackedDayToTimeChargesResolver<TParent>;
  timeChargeTotals?: TrackedDayToTimeChargeTotalsResolver<TParent>;
}

export interface TrackedDayToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToWeekResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToTrackedTasksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToTimeChargesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayToTimeChargeTotalsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTrackedDayConnectionTypeResolver<TParent = any> {
  pageInfo?: TrackedDayConnectionToPageInfoResolver<TParent>;
  edges?: TrackedDayConnectionToEdgesResolver<TParent>;
}

export interface TrackedDayConnectionToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayConnectionToEdgesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTrackedDayEdgeTypeResolver<TParent = any> {
  cursor?: TrackedDayEdgeToCursorResolver<TParent>;
  node?: TrackedDayEdgeToNodeResolver<TParent>;
}

export interface TrackedDayEdgeToCursorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedDayEdgeToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTrackedTaskTypeResolver<TParent = any> {
  id?: TrackedTaskToIdResolver<TParent>;
  notes?: TrackedTaskToNotesResolver<TParent>;
  timeSlots?: TrackedTaskToTimeSlotsResolver<TParent>;
  trackedDay?: TrackedTaskToTrackedDayResolver<TParent>;
  chargeCodes?: TrackedTaskToChargeCodesResolver<TParent>;
}

export interface TrackedTaskToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedTaskToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedTaskToTimeSlotsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedTaskToTrackedDayResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TrackedTaskToChargeCodesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  id?: UserToIdResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
  trackedDays?: UserToTrackedDaysResolver<TParent>;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTrackedDaysResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
